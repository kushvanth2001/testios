
import 'dart:async';
import 'dart:convert';
import 'package:flutter/material.dart';
import 'package:get/get.dart';
import 'package:intl/intl.dart';
import 'package:shared_preferences/shared_preferences.dart';
import 'package:leads_manager/Controller/chat_controller.dart';
import 'package:leads_manager/Controller/leads_controller.dart';
import 'package:leads_manager/constants/colorsConstants.dart';
import 'package:leads_manager/constants/networkConstants.dart';
import 'package:leads_manager/helper/socketHelper.dart';
import 'package:leads_manager/models/model_chat.dart';
import 'package:leads_manager/views/chat/chatDetailsScreen.dart';

class ChatWidget extends StatefulWidget {
  final ChatModel chatModel;
  final Stream<String>? newMessageStream;
  final StreamController<Map<String, int>>? newMessageCountController;
  final Map<String, int>? newMessageCounts;
  final isOther;
  final String? firstAppName;
  final List<dynamic>? templates;
  final VoidCallback? onBack;
  final LeadController leadController;
  bool? fromActive;

  ChatWidget({
    Key? key,
    required this.chatModel,
    this.newMessageStream,
    this.newMessageCountController,
    this.newMessageCounts,
    this.isOther = false,
    this.firstAppName,
    this.templates,
    this.onBack,
    required this.leadController,
    this.fromActive,
  }) : super(key: key);

  @override
  State<ChatWidget> createState() => _ChatWidgetState();
}

class _ChatWidgetState extends State<ChatWidget> {
  final ChatController chatController = Get.find<ChatController>();

  @override
  void initState() {
    super.initState();
    loadData();
  }

  Future<void> loadData() async {
    await Future.delayed(Duration.zero);
     //testforcereload
    await ChatController().loadData(forcedReload:true);
  }

  @override
  Widget build(BuildContext context) {
    String lastTsText = widget.chatModel.lastTs != null
        ? convertDateTimeStr(widget.chatModel.lastTs ~/ 1)
        : '';
    return FutureBuilder(
      future: loadData(),
      builder: (context, snapshot) {
        if (snapshot.connectionState == ConnectionState.waiting) {
          return CircularProgressIndicator(); // Show loading indicator
        } else {
          return Container(
            color: Colors.white,
            child: Column(
              children: [
                Stack(
                  children: [
                    ListTile(
                      leading: CircleAvatar(
                        backgroundColor: Colors.blueGrey,
                        backgroundImage:
                            AssetImage("assets/images/profile.png"),
                      ),
                      title: Text(
                        "${widget.chatModel.customerName == null || widget.chatModel.customerName == '' ? widget.chatModel.customerNo : widget.chatModel.customerName}",
                        maxLines: 1,
                        overflow: TextOverflow.ellipsis,
                        style: TextStyle(
                          fontWeight: FontWeight.bold,
                          color: Color.fromARGB(255, 49, 49, 49),
                        ),
                      ),
                      subtitle: StreamBuilder<String>(
                        stream: widget.newMessageStream,
                        builder: (context, snapshot) {
                          if (snapshot.hasData) {
                            return Text(snapshot.data!);
                          } else {
                            return messages();
                          }
                        },
                      ),
                      trailing: StreamBuilder<Map<String, int>>(
                        stream: widget.newMessageCountController?.stream,
                        builder: (context, snapshot) {
                          final newMessageCounts = snapshot.data ?? {};
                          return Column(
                            mainAxisAlignment: MainAxisAlignment.spaceEvenly,
                            children: [
                              Text(lastTsText,
                                  style: TextStyle(
                                      color: kSecondayTextcolor,
                                      fontStyle: FontStyle.italic)),
                              if (newMessageCounts[
                                          widget.chatModel.customerNo] !=
                                      null &&
                                  newMessageCounts[
                                          widget.chatModel.customerNo]! >
                                      0)
                                CircleAvatar(
                                  radius: 10,
                                  child: Text(
                                    newMessageCounts[
                                            widget.chatModel.customerNo]!
                                        .toString(),
                                    style: TextStyle(fontSize: 12),
                                  ),
                                ),
                            ],
                          );
                        },
                      ),
                      onTap: () async {
                        Get.to(() => ChatDetailsScreen(
                              firstAppName: widget.firstAppName,
                              chatModel: widget.chatModel,
                              isOther: widget.isOther,
                              onBack: widget.onBack,
                              leadController: widget.leadController,
                              fromActive: widget.fromActive,
                            ));
                        widget.newMessageCounts?[widget.chatModel.customerNo] =
                            0;
                        if (widget.newMessageCounts != null) {
                          Map<String, int> nonNullNewMessageCounts =
                              widget.newMessageCounts!;
                          widget.newMessageCountController
                              ?.add(nonNullNewMessageCounts);
                        }
                      },
                    ),
                  ],
                ),
                Divider(
                  height: 1,
                )
              ],
            ),
          );
        }
      },
    );
  }

  String convertDateTimeStr(int timestamp) {
    var format = new DateFormat('dd-MM-yy hh:mm a');
    var date = new DateTime.fromMillisecondsSinceEpoch(timestamp * 1000);
    var str = format.format(date);
    return str;
  }

  Text messages() {
    String decodedText = "";
    try {
      final text = widget.chatModel.preview_message ?? "";
      decodedText = utf8.decode(latin1.encode(text));
    } catch (e) {
      print('Error decoding message: $e');
      decodedText = widget.chatModel.preview_message ?? "";
    }

    if (widget.chatModel.messages == null ||
        widget.chatModel.messages?.length == 0) {
      print("$decodedText");
      return Text(
        decodedText,
        style:
            TextStyle(color: kSecondayTextcolor, fontStyle: FontStyle.normal),
        maxLines: 1,
        overflow: TextOverflow.ellipsis,
      );
    }
    return Text(
      decodedText,
      style: TextStyle(color: kSecondayTextcolor, fontStyle: FontStyle.normal),
      maxLines: 1,
      overflow: TextOverflow.ellipsis,
    );
  }
}

















import 'dart:async';

import 'package:flutter/cupertino.dart';
import 'package:flutter/material.dart' as material;
import 'package:get/get.dart';
import 'package:leads_manager/Controller/chat_controller.dart';
import 'package:leads_manager/Controller/leads_controller.dart';
import 'package:leads_manager/Controller/search_controller.dart';
import 'package:leads_manager/constants/networkConstants.dart';
import 'package:leads_manager/helper/socketHelper.dart';
import 'package:leads_manager/models/model_chat.dart';
import 'package:leads_manager/views/chat/chatWidget.dart';

import '../../utils/snapPeUI.dart';

class MyChatPage extends StatefulWidget {
  final List<ChatModel> chatModel;
  final LeadController leadController;
  final bool fromActive;
  const MyChatPage(
      {Key? key,
      required this.chatModel,
      required this.leadController,
      required this.fromActive})
      : super(key: key);

  @override
  State<MyChatPage> createState() => _MyChatPageState();
}

class _MyChatPageState extends State<MyChatPage> {
  List<Stream<String>> newMessageStreams = [];
  final newMessageCountController =
      StreamController<Map<String, int>>.broadcast();
Timer? _debounce;
  Map<String, int> newMessageCounts = {};
  @override
  void initState() {
    super.initState();
    Future.delayed(Duration.zero, () async {
       //testforcereload
      await ChatController().loadData(forcedReload:true);
    });
    newMessageStreams = widget.chatModel
        .map((chat) => getNewMessageStream(chat.customerNo))
        .toList();
  }
@override
void dispose() {
    _debounce?.cancel();
    super.dispose();
}
  @override
  Widget build(BuildContext context) {
    final textController = TextEditingController();
    SearchController searchController = SearchController();
    return material.RefreshIndicator(
      onRefresh: () {
        return Future.delayed(
          Duration(seconds: 1),
          () {
             //testforcereload
            ChatController().loadData(forcedReload:true);
          },
        );
      },
      child: Column(
        children: [
          Padding(
            padding: const EdgeInsets.all(8.0),
            child: CupertinoSearchTextField(
              controller: textController,
              placeholder: "Search chat with name or number",
              decoration: SnapPeUI().searchBoxDecorationForChat(),
                         onSubmitted: (keyword) {
                  searchController.filterChat(widget.chatModel, keyword);
    
         
              },
              onChanged: (keyword){
if(keyword==""){
  searchController.filterChat(widget.chatModel, keyword);
}}
            ),
          ),
          Expanded(
            child: Container(child: Obx(() {
              // // Sort the chatModel list based on the lastTs property
              // chatModel.sort((a, b) {
              //   if (a.lastTs != null && b.lastTs != null) {
              //     return a.lastTs.compareTo(b.lastTs);
              //   } else if (a.lastTs != null) {
              //     return -1;
              //   } else if (b.lastTs != null) {
              //     return 1;
              //   } else {
              //     return 0;
              //   }
              // });

              return searchController.filterChatList.value.length == 0 &&
                      textController.text.isEmpty
                  ? ListView.builder(
                      // reverse: true,
                      itemCount: widget.chatModel.length,
                      itemBuilder: ((context, index) {
                        return ChatWidget(
                            chatModel: widget.chatModel[index],
                            newMessageStream: newMessageStreams[index],
                            newMessageCountController:
                                newMessageCountController,
                            newMessageCounts: newMessageCounts,
                            leadController: widget.leadController,
                            fromActive: widget.fromActive);
                      }))
                  : ListView.builder(
                      // reverse: true,
                      itemCount: searchController.filterChatList.length,
                      itemBuilder: ((context, index) {
                        return ChatWidget(
                            chatModel: searchController.filterChatList[index],
                            newMessageStream: newMessageStreams[index],
                            newMessageCountController:
                                newMessageCountController,
                            newMessageCounts: newMessageCounts,
                            leadController: widget.leadController,
                            fromActive: widget.fromActive);
                      }));
            })),
          ),
        ],
      ),
    );
  }

  // Method to create a stream of new messages for a given customer number
  Stream<String> getNewMessageStream(String customerNo) {
    // Create a StreamController to manage the stream
    final StreamController<String> _controller =
        StreamController<String>.broadcast();

    // Add a listener for new messages
    SocketHelper.getInstance.getSocket
        ?.on(NetworkConstants.EVENT_MESSAGE_RECEIVED, (data) async {
      // Check if the new message is for this chat
      if (data['destination_id'] == customerNo) {
        // Increment the count of new messages for this chat
        newMessageCounts[customerNo] = (newMessageCounts[customerNo] ?? 0) + 1;

        // Add the updated count of new messages to the stream
        newMessageCountController.add(newMessageCounts);
        // Add the new message to the stream
        _controller.add(data['message']);
      }
    });

    // Return the stream
    return _controller.stream;
  }
}




















